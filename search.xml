<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUAA_CO_pre_Logisim</title>
      <link href="/2025/01/18/pre-Logisim/pre-Logisim/"/>
      <url>/2025/01/18/pre-Logisim/pre-Logisim/</url>
      
        <content type="html"><![CDATA[<h1 id="北航计算机组成原理pre阶段Logisim知识分享"><a href="#北航计算机组成原理pre阶段Logisim知识分享" class="headerlink" title="北航计算机组成原理pre阶段Logisim知识分享"></a>北航计算机组成原理pre阶段Logisim知识分享</h1><blockquote><p>通过阅读本文，您大致可以学习到2024年秋季北航计算机组成原理课程pre阶段，关于Logisim知识的内容</p></blockquote><p>Logisim是一个用来仿真模拟电路的软件</p><h2 id="常用部件"><a href="#常用部件" class="headerlink" title="常用部件"></a>常用部件</h2><p>由于篇幅限制，这里不可能精讲所有部件，只是挑选一些笔者认为比较重要的部件进行介绍</p><h3 id="Splitter"><a href="#Splitter" class="headerlink" title="Splitter"></a>Splitter</h3><p>又叫分线器。一般是用来把一条有多比特位数据的数据线分开成不同的几小条数据线，或者是把几条线的比特位合并到一条数据线中。在将来的CPU设计中，Splitter还经常用于从一个多位数据线上截取特定比特位，送给不同的部件</p><p>举个栗子</p><p><img src="/image.png"></p><p>图中的<code>Splitter A</code>，把一个32位的数据分成了四份，每一份都是8位，而<code>Splitter B</code>，只取了32位数据的低20位。<code>Splitter C</code>则是把32位输入的低8位作为合并数据的低8位，把32位输入的低20位作为高20位，合并成了一个28位的输出</p><p>Logisim的左下角有这个部件的属性</p><ul><li><code>Fan Out</code> : 表示该<code>Splitter</code>有几个分支，即将数据分成了几路，或者将几路数据合并了</li><li><code>Bit Width In</code> : 表示总线的位宽，也就是图中<code>Splitter A</code>左下角的引脚所连线的位宽</li><li><code>Appearance</code> : 选择<code>Splitter</code>的外貌，是左手手性还是右手手性等</li><li><code>Bit 0-31</code> : 决定总线中的某一位，是否在某一个分支中</li></ul><h3 id="Pin"><a href="#Pin" class="headerlink" title="Pin"></a>Pin</h3><p>又叫引脚。常见的有输入引脚和输出引脚。还有是否支持三态，即<code>0</code>, <code>1</code>, <code>x</code>（浮空值）</p><p>与引脚有关的还有上拉电阻和下拉电阻，这个主要用来处理来自父级电路的浮空值，把浮空值转换成0（下拉）或者是1（上拉）</p><h3 id="Probe"><a href="#Probe" class="headerlink" title="Probe"></a>Probe</h3><p>探针，用来显示一条数据线的数据，不会影响电路的工作，<del>debug的时候很好用</del></p><h3 id="Tunnel"><a href="#Tunnel" class="headerlink" title="Tunnel"></a>Tunnel</h3><p>一对同名的<code>Tunnel</code>本质上和一条导线是一样的。<code>Tunnel</code>可以让你的电路更加清晰，不会有那么多<del>丑陋的导线</del>，错综复杂</p><h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>时钟。在时序电路里很重要</p><p>时钟会以一定的频率在高电平和低电平之间转换。转换的瞬间统称时钟沿。由低电平转换到高电平称作上升沿，由高电平转换到低电平称作下降沿</p><h3 id="Gates"><a href="#Gates" class="headerlink" title="Gates"></a>Gates</h3><p>各种门元件。这里不做一一介绍了</p><h3 id="MUX"><a href="#MUX" class="headerlink" title="MUX"></a>MUX</h3><p>多路选择器。在一个元件内，一个输出可能有多个信息来源，在这些信息中筛选出我们需要的数据，就要用到MUX</p><p><code>MUX</code>包括输入信号和选择信号，每一个输入信号对应一个2进制编码。还可以根据需要，增加使能端：若使能端为1或浮空值，<code>MUX</code>均可以正常工作；若为0，则输出为浮空值。</p><h3 id="DMX"><a href="#DMX" class="headerlink" title="DMX"></a>DMX</h3><p>多路复用器。其功能与<code>MUX</code>正好相反</p><p><code>DMX</code>将一个输入，按照需求，送到不同的输出上。相较于<code>MUX</code>，<code>DMX</code>还支持三态。如果支持三态，则未被选择的输出引脚会输出浮空值而不是0</p><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>解码器。解码器的输入只有选择信号。它和<code>DMX</code>长得很像，对于一个特定的选择信号，解码器对应的输出引脚会输出1</p><p>常见于选择写入的使能，在P0的寄存器堆实现中会用到</p><h3 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h3><p>运算元件，包括加减乘除、取负数、比较、移位、位加等，比较好理解，这里不做过多介绍</p><h3 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h3><p>寄存器。寄存器内部会利用触发器等来存储一个值，一般是在时序电路中会被用到，常见的触发模式是时钟上升沿存入</p><p>若复位信号不为1，则当时钟上升沿到来时，寄存器会将写入端口收到的数据写入寄存器内部，相应的输出会改变。寄存器的输出就是寄存器内部存着的数据</p><p><img src="/image-1.png" alt="alt text"></p><p>图中，寄存器左侧的D引脚便是输入端口，en引脚是写使能，有一个三角形的引脚是时钟引脚，0是复位端口，当该输入为1是，无论时钟处于高电平还是低电平，直接将寄存器中存储的值变成0</p><h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p><code>RAM</code>是可读可写的存储器，一般我们用它来作为CPU的内存</p><p><code>RAM</code>有多种数据传输方式，比较常用的是读写分别用各自的端口</p><h3 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h3><p><code>RAM</code>是只读的，一般我们用它来存储CPU需要运行的指令</p><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>计数器。它长得和寄存器很像。以上升沿为例，若复位信号不为1，则每个时钟上升沿到来时，计数器会把它内部的数据+1</p><p>根据需求，当计数器内部的值到达最大值时，有几个不同的工作模式：</p><ul><li><code>Wrap Around</code> : 变成0重新计数</li><li><code>Continue Counting</code> : 继续计数</li><li><code>Stay At Value</code> : 保持于最大值或最小值</li><li><code>Load Next Value</code> : 从D端读入下一个数据</li></ul><h2 id="常见电路"><a href="#常见电路" class="headerlink" title="常见电路"></a>常见电路</h2><h3 id="寄存器的同步复位"><a href="#寄存器的同步复位" class="headerlink" title="寄存器的同步复位"></a>寄存器的同步复位</h3><p>寄存器本身是支持异步复位的，但是我们很多时候需要同步复位，也就是当时钟上升沿到来时，若复位信号为1，将寄存器复位</p><p>其实方法有很多，我们讲解一种比较清楚、比较容易看懂的做法</p><p>说白了，同步复位的要求，就是当时钟上升沿到来时，根据<code>reset</code>信号的值，决定我们要向寄存器里写什么值，因此我们需要用到<code>MUX</code>来实现</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2025/01/17/2024-1-17/"/>
      <url>/2025/01/17/2024-1-17/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><p>你好，当你看到这段文字的时候，证明我已经成功搭建出了自己的blog，真是<del>十分甚至九分</del>的感动口牙！<br>今后我也会多多在这个blog上分享自己的学习心得、游戏心得、生活琐事等等！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
