<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUAA_OS_Lab0_实验报告</title>
      <link href="/2025/03/11/OS-Lab0/OS-Lab0%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
      <url>/2025/03/11/OS-Lab0/OS-Lab0%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="Thinking-0-1"><a href="#Thinking-0-1" class="headerlink" title="Thinking 0.1"></a>Thinking 0.1</h2><p>执行<code>git status &gt; Untracked.txt</code>，是查询当前<code>README.txt</code>的文件状态，并将其记录在<code>Untracked.txt</code>文件中。后续两个命令同理。</p><p>执行完<code>cat Untracked.txt</code>后，显示出<code>未跟踪的文件</code>，说明文件刚刚新建的时候，其处于未跟踪的状态；执行<code>cat Stage.txt</code>后，显示出<code>要提交的变更</code>，说明修改了文件，并使用<code>add</code>命令之后，文件处于暂存的状态；执行<code>cat Modified.txt</code>之后，显示出<code>尚未暂存以备提交的变更</code>，说明文件再被修改之后，处于被修改状态。</p><h2 id="Thinking-0-2"><a href="#Thinking-0-2" class="headerlink" title="Thinking 0.2"></a>Thinking 0.2</h2><p>add the file 对应的是git中的<code>git add</code>命令</p><p>stage the file 对应的也是git中的<code>git add</code>命令</p><p>commit 对应的是git中的<code>git commit</code>命令</p><h2 id="Thinking-0-3"><a href="#Thinking-0-3" class="headerlink" title="Thinking 0.3"></a>Thinking 0.3</h2><ol><li><code>git checkout --print.c</code></li><li><code>git reset HEAD print.c &amp;&amp; git checkout --print.c</code></li><li><code>git rm --cached hello.txt</code></li></ol><h2 id="Thinking-0-4"><a href="#Thinking-0-4" class="headerlink" title="Thinking 0.4"></a>Thinking 0.4</h2><p>第一次<code>git log</code>如图所示</p><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\图片1.png" alt="图片1"></p><p>第二次<code>git log</code>如图所示</p><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\图片2.png" alt="图片2"></p><p>第三次<code>git log</code>如图所示</p><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\图片3.png" alt="图片3"></p><p>第四次<code>git log</code>如图所示</p><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\图片4.png" alt="图片4"></p><h2 id="Thinking-0-5"><a href="#Thinking-0-5" class="headerlink" title="Thinking 0.5"></a>Thinking 0.5</h2><p>执行<code>echo first</code>后如图</p><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\图片5.png" alt="图片5"></p><p>执行<code>echo second &gt; output.txt</code>后如图</p><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\图片6.png" alt="图片6"></p><p>执行<code>echo third &gt; output.txt</code>后如图</p><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\图片7.png" alt="图片7"></p><p>执行<code>echo forth &gt;&gt; output.txt</code>后如图</p><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\图片8.png" alt="图片8"></p><h2 id="Thinking-0-6"><a href="#Thinking-0-6" class="headerlink" title="Thinking 0.6"></a>Thinking 0.6</h2><p><code>command</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash                                                              <span class="built_in">touch</span> <span class="built_in">test</span></span></span><br><span class="line">echo &#x27;echo Shell Start...&#x27; &gt; test</span><br><span class="line">echo &#x27;echo set a = 1&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;a=1&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo set b = 2&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;b=2&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo set c = a+b&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;c=$[$a+$b]&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo c = $c&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo save c to ./file1&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo $c&gt;file1&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo save b to ./file2&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo $b&gt;file2&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo save a to ./file3&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo $a&gt;file3&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo save file1 file2 file3 to file4&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;cat file1&gt;file4&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;cat file2&gt;&gt;file4&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;cat file3&gt;&gt;file4&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;echo save file4 to ./result&#x27; &gt;&gt; test</span><br><span class="line">echo &#x27;cat file4&gt;&gt;result&#x27; &gt;&gt; test</span><br></pre></td></tr></table></figure><p><code>result</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ul><li><code>echo echo Shell Start</code>直接把<code>echo Shell Start</code>作为字符串输出；</li><li><code>echo (反顿号)echo Shell Start(反顿号)</code>是将<code>echo Shell Start</code>的<strong>输出</strong>作为外层echo的输入，所以会输出<code>Shell Start</code>；</li><li><code>echo echo $c&gt;file1</code>直接把<code>echo $c&gt;file</code>作为字符串输出；</li><li><code>echo (反顿号)echo $c&gt;file1(反顿号)</code>是将<code>echo $c&gt;file1</code>的<strong>输出</strong>作为外层echo的输入，所以会直接输出<code>$c&gt;file1</code>；</li></ul><h1 id="实验难点"><a href="#实验难点" class="headerlink" title="实验难点"></a>实验难点</h1><p><img src="E:\BlogFile\blog\source_posts\OS-Lab0\实验难点.png" alt="实验难点"></p><p>这里借用一下Hyggge学长的图，我个人认为写的非常好，我在进行线上实验的时候也注意到了这些难点，也是我经常在实验过程中回头去看指导书的地方。</p><p>在我自己的感觉里，我对<code>awk</code>命令和<code>grep</code>命令比较迷惑，也是看了很多攻略。其中<code>grep</code>命令的正则表达式和<code>java</code>的正则表达式不太一样，还得注意。</p><h1 id="实验体会"><a href="#实验体会" class="headerlink" title="实验体会"></a>实验体会</h1><p>对于计算机小白的我来说，刚开始接触命令行还是在大二上研究计组的时候。当初跟着同学里的大佬，在研究自动化测试的时候，慢慢开始接触命令行，学会用命令行解析、比对。当初确实感觉，相对图形化界面，命令行的一个极大的优点就是简洁。</p><p>当然，CLI对于计算机小白的我还是很有挑战性的。在刚开始使用CLI的时候，面对多种多样的指令、参数，我总是记不住它们的功能，写着写着还要重新去翻指导书，后来慢慢的才习惯了。</p><p>道阻且长，行则将至！诸君一起努力！</p><h1 id="原创说明"><a href="#原创说明" class="headerlink" title="原创说明"></a>原创说明</h1><p>本实验报告参考了Hyggge学长的博客，原文章链接如下：<br><a href="https://hyggge.github.io/2022/03/21/os/os-lab0-shi-yan-bao-gao/">https://hyggge.github.io/2022/03/21/os/os-lab0-shi-yan-bao-gao/</a></p><p>另外致谢我的舍友風船同学，在学习过程中给了我很多帮助和解惑。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUAA_CO_pre_Logisim</title>
      <link href="/2025/01/18/pre-Logisim/pre-Logisim/"/>
      <url>/2025/01/18/pre-Logisim/pre-Logisim/</url>
      
        <content type="html"><![CDATA[<h1 id="北航计算机组成原理pre阶段Logisim知识分享"><a href="#北航计算机组成原理pre阶段Logisim知识分享" class="headerlink" title="北航计算机组成原理pre阶段Logisim知识分享"></a>北航计算机组成原理pre阶段Logisim知识分享</h1><blockquote><p>通过阅读本文，您大致可以学习到2024年秋季北航计算机组成原理课程pre阶段，关于Logisim知识的内容</p></blockquote><p>Logisim是一个用来仿真模拟电路的软件</p><h2 id="常用部件"><a href="#常用部件" class="headerlink" title="常用部件"></a>常用部件</h2><p>由于篇幅限制，这里不可能精讲所有部件，只是挑选一些笔者认为比较重要的部件进行介绍</p><h3 id="Splitter"><a href="#Splitter" class="headerlink" title="Splitter"></a>Splitter</h3><p>又叫分线器。一般是用来把一条有多比特位数据的数据线分开成不同的几小条数据线，或者是把几条线的比特位合并到一条数据线中。在将来的CPU设计中，Splitter还经常用于从一个多位数据线上截取特定比特位，送给不同的部件</p><p>举个栗子</p><p><img src="/image.png"></p><p>图中的<code>Splitter A</code>，把一个32位的数据分成了四份，每一份都是8位，而<code>Splitter B</code>，只取了32位数据的低20位。<code>Splitter C</code>则是把32位输入的低8位作为合并数据的低8位，把32位输入的低20位作为高20位，合并成了一个28位的输出</p><p>Logisim的左下角有这个部件的属性</p><ul><li><code>Fan Out</code> : 表示该<code>Splitter</code>有几个分支，即将数据分成了几路，或者将几路数据合并了</li><li><code>Bit Width In</code> : 表示总线的位宽，也就是图中<code>Splitter A</code>左下角的引脚所连线的位宽</li><li><code>Appearance</code> : 选择<code>Splitter</code>的外貌，是左手手性还是右手手性等</li><li><code>Bit 0-31</code> : 决定总线中的某一位，是否在某一个分支中</li></ul><h3 id="Pin"><a href="#Pin" class="headerlink" title="Pin"></a>Pin</h3><p>又叫引脚。常见的有输入引脚和输出引脚。还有是否支持三态，即<code>0</code>, <code>1</code>, <code>x</code>（浮空值）</p><p>与引脚有关的还有上拉电阻和下拉电阻，这个主要用来处理来自父级电路的浮空值，把浮空值转换成0（下拉）或者是1（上拉）</p><h3 id="Probe"><a href="#Probe" class="headerlink" title="Probe"></a>Probe</h3><p>探针，用来显示一条数据线的数据，不会影响电路的工作，<del>debug的时候很好用</del></p><h3 id="Tunnel"><a href="#Tunnel" class="headerlink" title="Tunnel"></a>Tunnel</h3><p>一对同名的<code>Tunnel</code>本质上和一条导线是一样的。<code>Tunnel</code>可以让你的电路更加清晰，不会有那么多<del>丑陋的导线</del>，错综复杂</p><h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>时钟。在时序电路里很重要</p><p>时钟会以一定的频率在高电平和低电平之间转换。转换的瞬间统称时钟沿。由低电平转换到高电平称作上升沿，由高电平转换到低电平称作下降沿</p><h3 id="Gates"><a href="#Gates" class="headerlink" title="Gates"></a>Gates</h3><p>各种门元件。这里不做一一介绍了</p><h3 id="MUX"><a href="#MUX" class="headerlink" title="MUX"></a>MUX</h3><p>多路选择器。在一个元件内，一个输出可能有多个信息来源，在这些信息中筛选出我们需要的数据，就要用到MUX</p><p><code>MUX</code>包括输入信号和选择信号，每一个输入信号对应一个2进制编码。还可以根据需要，增加使能端：若使能端为1或浮空值，<code>MUX</code>均可以正常工作；若为0，则输出为浮空值。</p><h3 id="DMX"><a href="#DMX" class="headerlink" title="DMX"></a>DMX</h3><p>多路复用器。其功能与<code>MUX</code>正好相反</p><p><code>DMX</code>将一个输入，按照需求，送到不同的输出上。相较于<code>MUX</code>，<code>DMX</code>还支持三态。如果支持三态，则未被选择的输出引脚会输出浮空值而不是0</p><h3 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h3><p>解码器。解码器的输入只有选择信号。它和<code>DMX</code>长得很像，对于一个特定的选择信号，解码器对应的输出引脚会输出1</p><p>常见于选择写入的使能，在P0的寄存器堆实现中会用到</p><h3 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h3><p>运算元件，包括加减乘除、取负数、比较、移位、位加等，比较好理解，这里不做过多介绍</p><h3 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h3><p>寄存器。寄存器内部会利用触发器等来存储一个值，一般是在时序电路中会被用到，常见的触发模式是时钟上升沿存入</p><p>若复位信号不为1，则当时钟上升沿到来时，寄存器会将写入端口收到的数据写入寄存器内部，相应的输出会改变。寄存器的输出就是寄存器内部存着的数据</p><p><img src="/image-1.png" alt="alt text"></p><p>图中，寄存器左侧的D引脚便是输入端口，en引脚是写使能，有一个三角形的引脚是时钟引脚，0是复位端口，当该输入为1是，无论时钟处于高电平还是低电平，直接将寄存器中存储的值变成0</p><h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p><code>RAM</code>是可读可写的存储器，一般我们用它来作为CPU的内存</p><p><code>RAM</code>有多种数据传输方式，比较常用的是读写分别用各自的端口</p><h3 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h3><p><code>RAM</code>是只读的，一般我们用它来存储CPU需要运行的指令</p><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>计数器。它长得和寄存器很像。以上升沿为例，若复位信号不为1，则每个时钟上升沿到来时，计数器会把它内部的数据+1</p><p>根据需求，当计数器内部的值到达最大值时，有几个不同的工作模式：</p><ul><li><code>Wrap Around</code> : 变成0重新计数</li><li><code>Continue Counting</code> : 继续计数</li><li><code>Stay At Value</code> : 保持于最大值或最小值</li><li><code>Load Next Value</code> : 从D端读入下一个数据</li></ul><h2 id="常见电路"><a href="#常见电路" class="headerlink" title="常见电路"></a>常见电路</h2><h3 id="寄存器的同步复位"><a href="#寄存器的同步复位" class="headerlink" title="寄存器的同步复位"></a>寄存器的同步复位</h3><p>寄存器本身是支持异步复位的，但是我们很多时候需要同步复位，也就是当时钟上升沿到来时，若复位信号为1，将寄存器复位</p><p>其实方法有很多，我们讲解一种比较清楚、比较容易看懂的做法</p><p>说白了，同步复位的要求，就是当时钟上升沿到来时，根据<code>reset</code>信号的值，决定我们要向寄存器里写什么值，因此我们需要用到<code>MUX</code>来实现</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2025/01/17/2024-1-17/"/>
      <url>/2025/01/17/2024-1-17/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><p>你好，当你看到这段文字的时候，证明我已经成功搭建出了自己的blog，真是<del>十分甚至九分</del>的感动口牙！<br>今后我也会多多在这个blog上分享自己的学习心得、游戏心得、生活琐事等等！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {    background: linear-gradient(      -45deg,      #e1cda6,      #d8b75d,      #66afd4,      #6d6df0,      #db92d5    );    box-shadow: 0 0 5px rgb(66, 68, 68);    position: relative;    background-size: 400% 400%;    animation: Gradient 10s ease infinite !important;  }  @keyframes Gradient {    0% {      background-position: 0% 50%;    }    50% {      background-position: 100% 50%;    }    100% {      background-position: 0% 50%;    }  }    /* 黑夜模式适配 */  [data-theme="dark"] #aside-content > .card-widget.card-info {    background: #191919ee;  }    /* 个人信息Follow me按钮 */  #aside-content > .card-widget.card-info > #card-info-btn {    background-color: #3eb8be;    border-radius: 8px;  }/* 鼠标样式 */#cursor {    position: fixed;    width: 16px;    height: 16px;    /* 这里改变跟随的底色 */    background: rgb(222, 143, 234);    border-radius: 8px;    opacity: 0.25;    z-index: 10086;    pointer-events: none;    transition: 0.2s ease-in-out;    transition-property: background, opacity, transform;  }    #cursor.hidden {    opacity: 0;  }    #cursor.hover {    opacity: 0.1;    transform: scale(2.5);    -webkit-transform: scale(2.5);    -moz-transform: scale(2.5);    -ms-transform: scale(2.5);    -o-transform: scale(2.5);  }    #cursor.active {    opacity: 0.5;    transform: scale(0.5);    -webkit-transform: scale(0.5);    -moz-transform: scale(0.5);    -ms-transform: scale(0.5);    -o-transform: scale(0.5);  }  :root {    --trans-light: rgba(255, 255, 255, 0.88);    --trans-dark: rgba(25, 25, 25, 0.88);    --border-style: 1px solid rgb(169, 169, 169);    --backdrop-filter: blur(5px) saturate(150%);  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: var(--trans-light);    -webkit-backdrop-filter: var(--backdrop-filter);            backdrop-filter: var(--backdrop-filter);    border-radius: 25px;    border: var(--border-style);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: var(--trans-light);    -webkit-backdrop-filter: var(--backdrop-filter);            backdrop-filter: var(--backdrop-filter);    border-radius: 18px;    border: var(--border-style);  }    /* 文章页、归档页、普通页面 */  div#post,  div#page,  div#archive {    background: var(--trans-light);    -webkit-backdrop-filter: var(--backdrop-filter);            backdrop-filter: var(--backdrop-filter);    border: var(--border-style);    border-radius: 20px;  }    /* 导航栏 */  #page-header.nav-fixed #nav {    background: rgba(255, 255, 255, 0.75);    -webkit-backdrop-filter: var(--backdrop-filter);            backdrop-filter: var(--backdrop-filter);  }    [data-theme="dark"] #page-header.nav-fixed #nav {    background: rgba(0, 0, 0, 0.7) !important;  }    /* 夜间模式遮罩 */  [data-theme="dark"] #recent-posts > .recent-post-item,  [data-theme="dark"] #aside-content .card-widget,  [data-theme="dark"] div#post,  [data-theme="dark"] div#archive,  [data-theme="dark"] div#page {    background: var(--trans-dark);  }      /* 夜间模式页脚页头遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }    /* 阅读模式 */  .read-mode #aside-content .card-widget {    background: rgba(158, 204, 171, 0.5) !important;  }  .read-mode div#post {    background: rgba(158, 204, 171, 0.5) !important;  }    /* 夜间模式下的阅读模式 */  [data-theme="dark"] .read-mode #aside-content .card-widget {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  [data-theme="dark"] .read-mode div#post {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  .pace {    -webkit-pointer-events: none;    pointer-events: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    z-index: 2000;    position: fixed;    margin: auto;    top: 4px;    left: 0;    right: 0;    height: 8px;    border-radius: 8px;    width: 7rem;    background: #eaecf2;    border: 1px #e3e8f7;    overflow: hidden}.pace-inactive .pace-progress {    opacity: 0;    transition: .3s ease-in}.pace .pace-progress {    -ms-box-sizing: border-box;    -o-box-sizing: border-box;    box-sizing: border-box;    transform: translate3d(0, 0, 0);    max-width: 200px;    position: absolute;    z-index: 2000;    display: block;    top: 0;    right: 100%;    height: 100%;    width: 100%;    /* linear-gradient(to right, #3494e6, #ec6ead) */    background: linear-gradient(to right, #43cea2, #3866ca);    animation: gradient 2s ease infinite;    background-size: 200%}.pace.pace-inactive {    opacity: 0;    transition: .3s;    top: -8px}/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  animation: ccc 5s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@keyframes ccc {  0% {    transform: rotate(0deg);  }  to {    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #4953da;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #ea73f8;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ac3fff;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #55f8e0;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #27a20b;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #b1ad77;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: #0080ff;}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: #0080ff;  animation: ccc 6s linear infinite;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' fill='%23F2A3FE' opacity='.5'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/snow.js"/>
      <url>/js/snow.js</url>
      
        <content type="html"><![CDATA[if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {    // 移动端不显示} else {    document.write('<canvas id="snow" style="position:fixed;top:0;left:0;width:100%;height:100%;z-index:-2;pointer-events:none"></canvas>');    window && (() => {        let e = {            flakeCount: 50, // 雪花数目            minDist: 150,   // 最小距离            color: "255, 255, 255", // 雪花颜色            size: 1.5,  // 雪花大小            speed: .5,  // 雪花速度            opacity: .7,    // 雪花透明度            stepsize: .5    // 步距        };        const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {            window.setTimeout(e, 1e3 / 60)        }            ;        window.requestAnimationFrame = t;        const i = document.getElementById("snow"),            n = i.getContext("2d"),            o = e.flakeCount;        let a = -100,            d = -100,            s = [];        i.width = window.innerWidth,            i.height = window.innerHeight;        const h = () => {            n.clearRect(0, 0, i.width, i.height);            const r = e.minDist;            for (let t = 0; t < o; t++) {                let o = s[t];                const h = a,                    w = d,                    m = o.x,                    c = o.y,                    p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));                if (p < r) {                    const e = (h - m) / p,                        t = (w - c) / p,                        i = r / (p * p) / 2;                    o.velX -= i * e,                        o.velY -= i * t                } else                    o.velX *= .98,                        o.velY < o.speed && o.speed - o.velY > .01 && (o.velY += .01 * (o.speed - o.velY)),                        o.velX += Math.cos(o.step += .05) * o.stepSize;                n.fillStyle = "rgba(" + e.color + ", " + o.opacity + ")",                    o.y += o.velY,                    o.x += o.velX,                    (o.y >= i.height || o.y <= 0) && l(o),                    (o.x >= i.width || o.x <= 0) && l(o),                    n.beginPath(),                    n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),                    n.fill()            }            t(h)        }            , l = e => {                e.x = Math.floor(Math.random() * i.width),                    e.y = 0,                    e.size = 3 * Math.random() + 2,                    e.speed = 1 * Math.random() + .5,                    e.velY = e.speed,                    e.velX = 0,                    e.opacity = .5 * Math.random() + .3            }            ;        document.addEventListener("mousemove", (e => {            a = e.clientX,                d = e.clientY        }        )),            window.addEventListener("resize", (() => {                i.width = window.innerWidth,                    i.height = window.innerHeight            }            )),            (() => {                for (let t = 0; t < o; t++) {                    const t = Math.floor(Math.random() * i.width)                        , n = Math.floor(Math.random() * i.height)                        , o = 3 * Math.random() + e.size                        , a = 1 * Math.random() + e.speed                        , d = .5 * Math.random() + e.opacity;                    s.push({                        speed: a,                        velX: 0,                        velY: a,                        x: t,                        y: n,                        size: o,                        stepSize: Math.random() / 30 * e.stepsize,                        step: 0,                        angle: 180,                        opacity: d                    })                }                h()            }            )()    }    )();}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = '見て見て!!!';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = 'Timotei————';    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
